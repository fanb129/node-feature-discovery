core:
#  labelWhiteList:
#  noPublish: false
 sleepInterval: 60s
#  featureSources: [all]
#  labelSources: ["custom"]
#  klog:
#    addDirHeader: false
#    alsologtostderr: false
#    logBacktraceAt:
#    logtostderr: true
#    skipHeaders: false
#    stderrthreshold: 2
#    v: 0
#    vmodule:
##   NOTE: the following options are not dynamically run-time configurable
##         and require a nfd-worker restart to take effect after being changed
#    logDir:
#    logFile:
#    logFileMaxSize: 1800
#    skipLogHeaders: false
sources:
 pci:
#    deviceClassWhitelist:
#      - "0200"
#      - "03"
#      - "12"
   deviceLabelFields:
#      - "class"
     - "vendor"
#      - "device"
#      - "subsystem_vendor"
#      - "subsystem_device"
  custom:
#    # The following feature demonstrates the capabilities of the matchAny
   - name: "gpushare"
     labels:
       "gpushare": "true"
#      # matchAny implements a logical IF over all elements (sub-matchers) in
#      # the list (i.e. at least one feature matcher must match)
     matchAny:
       - matchFeatures:
#            - feature: kernel.loadedmodule
#              matchExpressions:
#                driver-module-X: {op: Exists}
           - feature: pci.device
             matchExpressions:
               vendor: {op: Exists}
#                class: {op: In, value: ["0200"]}
#        - matchFeatures:
#            - feature: kernel.loadedmodule
#              matchExpressions:
#                driver-module-Y: {op: Exists}
#            - feature: usb.device
#              matchExpressions:
#                vendor: {op: In, value: ["8086"]}
#                class: {op: In, value: ["02"]}
#
#    # The following features demonstreate label templating capabilities
#    - name: "my template rule"
#      labelsTemplate: |
#        {{ range .system.osrelease }}my-system-feature.{{ .Name }}={{ .Value }}
#        {{ end }}
#      matchFeatures:
#        - feature: system.osrelease
#          matchExpressions:
#            ID: {op: InRegexp, value: ["^open.*"]}
#            VERSION_ID.major: {op: In, value: ["13", "15"]}
#
#    - name: "my template rule 2"
#      labelsTemplate: |
#        {{ range .pci.device }}my-pci-device.{{ .class }}-{{ .device }}=with-cpuid
#        {{ end }}
#      matchFeatures:
#        - feature: pci.device
#          matchExpressions:
#            class: {op: InRegexp, value: ["^06"]}
#            vendor: ["8086"]
#        - feature: cpu.cpuid
#          matchExpressions:
#            AVX: {op: Exists}
#
#    # The following examples demonstrate vars field and back-referencing
#    # previous labels and vars
#    - name: "my dummy kernel rule"
#      labels:
#        "my.kernel.feature": "true"
#      matchFeatures:
#        - feature: kernel.version
#          matchExpressions:
#            major: {op: Gt, value: ["2"]}
#
#    - name: "my dummy rule with no labels"
#      vars:
#        "my.dummy.var": "1"
#      matchFeatures:
#        - feature: cpu.cpuid
#          matchExpressions: {}
#
#    - name: "my rule using backrefs"
#      labels:
#        "my.backref.feature": "true"
#      matchFeatures:
#        - feature: rule.matched
#          matchExpressions:
#            my.kernel.feature: {op: IsTrue}
#            my.dummy.var: {op: Gt, value: ["0"]}
#
